# Grid Coordinates - Sass CSS Grid Framework Generator (Compass Extension)

Grid Coordinates is a [Sass](http://sass-lang.com/) CSS Grid Framework Generator delivered as a [Compass](http://compass-style.org/) extension. This project was inspired by Tyler Tate's [1kb CSS Grid](http://1kbgrid.com/) project.

Grid Coordinates is quite simple. It fully leverages classes, extends and even mixins (if that's your preference) to set up the styles for your CSS grid framework. Grid Coordinates even supports nested grids, prefix and suffix grid features. Grid Coordinates is capable of generating styles for grids of any size - you control the coordinates and it generates the styles.

## Installation

`gem install grid-coordinates`

Then add `require 'grid-coordinates'` to your Compass config file.

## Usage

Grid-coordinates defaults to the 960px grid with 12 columns (12 columns at 60px with a gutter of 20px). You can override these variables as needed in your project if this grid doesn't suit your needs.

Use [1kbgrid.com](http://1kbgrid.com) or another grid generator for guidance on configuring your grid settings.

See `templates/project/screen.sass` for an example of how to use this as well the output CSS.

### Configure as needed and import

    // Configure grid coordinates
    $grid-columns: 12
    $grid-width: 60px
    $grid-gutter-width: 20px
    $overflow-allowed: false
    
    @import grid-coordinates
    
    // Only needed if you are using the classes using `@extend` instead of the mixins
    +grid-coordinates
    
    ...

The `$overflow-allowed` setting controls which of Compass' two clearfix mixins to be used, `+clearfix` or `+pie-clearfix`. The default setting `false` will clip any content that overflows a grid block. If you need overflowing content to remain visible (i.e., a drop-down menu inside a grid block) update this setting to `true`.

### Using the classes and `@extend`

When you use the mixin `+grid-coordinates` you are able to leverage the classes in your HTML or use the Sass `extend` option to extend the defined classes in your Sass stylesheets. For an example of this in use, see `templates/project`.

`@extend grid-container`

`@extend nested-grid-container`

`@extend grid([columns])`

`@extend grid-prefix([columns])`

`@extend grid-suffix([columns])`

`@extend grid-full`

### Using the Mixins

Use these mixins in your Sass stylesheets. Keep in mind that when you go the route of mixins you are replicated much code in your output CSS. I advise you to learn the [Sass extend concept](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#extend) and use that method vs mixins. Your output CSS code with thank you.

`+grid-container`

`+nested-grid-container`

`+grid([columns])`

`+grid-prefix([columns])`

`+grid-suffix([columns])`

`+grid-full`

## License

Copyright (c) 2009 Adam Stacoviak

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.